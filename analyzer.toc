
;; Explicitly passing 'config' around rather than using Reader for perfomance reasons

(add-ns grmr (git-dependency "github.com:jduey/grammar.git" "grammar.toc"))
(add-ns ast (git-dependency "github.com:jduey/ast.git" "ast.toc"))

(def type-counter (int-generator TypeCount))

(def analyze-expr)

(defn inline-text-expr [expr]
  (for [[sym type text] (and (match expr List 'inline-text)
                             (or (and (< 2 (count expr)) (maybe expr))
                                 (let [[sym text] expr]
                                   (maybe [sym :no-type text]))))]
    (ast/inline-text text type (.file-name sym) (.line-num sym))))

(defprotocol AnalyzeLiteral
  (analyze-literal-value [v]
    nothing))

(extend-type Symbol
  AnalyzeLiteral
  (analyze-literal-value [sym]
    (maybe (ast/sym sym))))

(extend-type grmr/tagged-symbol
  AnalyzeLiteral
  (analyze-literal-value [sym]
    (maybe (ast/sym sym))))

(extend-type Keyword
  AnalyzeLiteral
  (analyze-literal-value [kw]
    (maybe (ast/kw kw))))

(extend-type Number
  AnalyzeLiteral
  (analyze-literal-value [num]
    (maybe (ast/number num))))

(extend-type String
  AnalyzeLiteral
  (analyze-literal-value [str-val]
    (maybe (ast/strng str-val))))

(defn analyze-call [config expr]
  (for [[target & args] (traverse expr maybe (partial analyze-expr config))]
    (ast/call-expr target args)))

(defn analyze-let-binding [config binding-pair]
  (for [_ (= 2 (count binding-pair))
        ;; TODO: can use 'match' here
        :let [[binding expr] binding-pair]
        ast (analyze-expr config expr)]
    (ast/binding binding ast)))

(defn analyze-let [config expr]
  (for [[_ bindings & exprs] (match expr List 'let _ _)
        bindings (traverse bindings maybe (partial analyze-let-binding config))
        body (traverse exprs maybe (partial analyze-expr config))]
    (ast/let-expr bindings body)))

(defn analyze-fn-arity [config expr]
  (for [[_ args exprs] (match expr List 'fn-arity _ _)
        body (traverse exprs maybe (partial analyze-expr config))]
    (ast/fn-arity args body)))

;; TODO: let anonymous function closures reference themselves by name
(defn analyze-fn [config expr]
  (for [[_ name arities] (match expr List 'fn _ _)
        arities (traverse arities maybe (partial analyze-expr config))]
    (ast/fn-expr (ast/sym name) arities)))

(defn analyze-proto-arity [config [fn-name params & default-body]]
  (or (and (some params (partial = "&"))
           (maybe (let [_ (print-err "Variadic args not allowed for protocol functions at "
                                     (.file-name fn-name) ": " (.line-num fn-name))]
                    (abort))))
      (or (for [_ (empty? default-body)]
            {fn-name {(dec (count params)) {}}})
          (for [ast (analyze-expr config (list 'fn-arity (rest params) default-body))]
            {fn-name {(dec (count params)) {:default ast}}}))))

(defn analyze-protocol [config expr]
  (for [[_ name & defs] (match expr List 'defprotocol _ _)
        proto-fns (traverse defs maybe (partial analyze-proto-arity config))]
    (ast/proto name (apply merge-with comp proto-fns))))

(defprotocol QuoteLiteral
  (quote-literal [quoted]
    (analyze-literal-value quoted)))

(extend-type Symbol
  QuoteLiteral
  (quote-literal [sym]
    (maybe (ast/quoted sym))))

(extend-type grmr/tagged-symbol
  QuoteLiteral
  (quote-literal [sym]
    (maybe (ast/quoted sym))))

(extend-type List
  QuoteLiteral
  (quote-literal [quoted-list]
    (or (for [[_ quoted-value] (match quoted-list List 'quote _)
              ast (quote-literal quoted-value)]
          ast)
        (for [[coll-builder & frms] (or (match quoted-list List 'hash-map _)
                                        (match quoted-list List 'vector _))
              contents (every frms quote-literal)]
          (ast/call-expr (ast/sym coll-builder) contents))
        (for [qs (every quoted-list quote-literal)]
          (ast/call-expr (ast/sym 'list) qs)))))

(defn analyze-quoted [expr]
  (for [[_ to-be-quoted] (match expr List 'quote _)
        quoted (quote-literal to-be-quoted)]
    quoted))

(defn analyze-def [config expr]
  (comp (for [[_ name value] (match expr List 'def _ _)
              val-ast (analyze-expr config value)]
          (ast/def-expr name val-ast))
        (for [[_ name] (match expr List 'def _)]
          (ast/declare name))))

(defn analyze-extensions [config protocol-name exts]
  (reduce exts (maybe [protocol-name {}])
          (fn [result expr]
            (flat-map result
                      (fn [result]
                        (let [[protocol-name extensions] result]
                          (or (map (or (instance? Symbol expr)
                                       (instance? grmr/tagged-symbol expr))
                                   (fn [_]
                                     [expr (assoc extensions expr {})]))
                              (for [[fn-name args & body] (match expr List _ _)
                                    body (traverse body maybe (partial analyze-expr config))
                                    extensions (or (map (get-in extensions [protocol-name fn-name])
                                                        (fn [fn-impls]
                                                          (assoc-in extensions [protocol-name fn-name]
                                                                    (conj fn-impls
                                                                          (ast/fn-arity (rest args) body)))))
                                                   ;; TODO: this seems to not work
                                                   ;; (update-in* extensions [protocol-name fn-name]
                                                   ;;             (fn [fn-impls]
                                                   ;;               (cons (ast/fn-arity (rest args) body)
                                                   ;;                     fn-impls)))
                                                   (maybe (assoc-in extensions [protocol-name fn-name]
                                                                    (list (ast/fn-arity (rest args) body)))))]
                                [protocol-name extensions]))))))))

(defn analyze-extend-type [config expr]
  (for [[_ type-name & exts] (match expr List 'extend-type _ _ _)
        protocol-name (first exts)
        :when (or (instance? Symbol protocol-name)
                  (instance? grmr/tagged-symbol protocol-name))
        [_ type-extensions] (analyze-extensions config protocol-name exts)]
    (ast/type-extension (.v (ast/sym type-name)) type-extensions)))

(defn analyze-reify [config expr]
  (for [[_ & defs] (match expr List 'reify)
        proto-name (first defs)
        [_ proto-specs] (analyze-extensions config proto-name defs)]
    (ast/reified (extract type-counter) proto-specs)))

(defn tagged-sym [sym file-name line-num]
  (grmr/tagged-symbol "" sym sym file-name line-num))

(defn constructor-expr [new-type-name type-val-sym fields]
  (let [fn (.file-name new-type-name)
        ln (.line-num new-type-name)]
    (list 'def new-type-name
          (list 'reify
                (tagged-sym 'Getter fn ln)
                (list (tagged-sym 'type-name fn ln)
                      (list 'vector 'x)
                      (str "*" new-type-name " constructor*"))
                (tagged-sym 'Stringable fn ln)
                (list (tagged-sym 'string-list fn ln)
                      (list 'vector '_)
                      (list 'list "<TypeCon " (str new-type-name) " ["
                            (to-str (interpose fields ", ")) "]>"))
                (tagged-sym 'Type fn ln)
                (list (tagged-sym 'instance? fn ln)
                      (list 'vector 'x 'v)
                      (list '=* (list 'get-type type-val-sym) '(get-type v)))
                (tagged-sym 'Container fn ln)
                (list (tagged-sym 'apply* fn ln)
                      (list 'vector '_ 'args)
                      (list 'apply 'invoke '_ 'args))
                (tagged-sym 'Function fn ln)
                (list (tagged-sym 'invoke fn ln)
                      (list* 'vector '_ fields)
                      (list 'new-type-value type-val-sym
                            (cons 'vector fields)))))))

(defn build-impls [fields impls]
  (or (and (empty? fields) (maybe impls))
      (every impls (fn [impl]
                     (or (for [[fn-name args expr & exprs] (match impl List _ _ _)
                               :let [args-map (reduce args {}
                                                      (fn [m arg]
                                                        (assoc m arg '_)))]
                               fields (every fields
                                             (fn [fld]
                                               (or (get args-map fld)
                                                   (maybe fld))))
                               arg (second args)]
                           (list fn-name args
                                 (list* 'let (list (list (comp fields (list :dont-care))
                                                         (list 'type-args arg)))
                                        (cons expr exprs))))
                         (maybe impl))))))

(defn impls-expr [impls-sym impls]
  (let [fn (.file-name impls-sym)
        ln (.line-num impls-sym)]
    (list 'def impls-sym
          (list*
           'reify
           (tagged-sym 'Eq fn ln)
           (list (tagged-sym '=* fn ln)
                 (list 'vector 'x 'y)
                 '(and (=* (get-type x) (get-type y))
                       (=* (type-args x) (type-args y))))
           (tagged-sym 'Associative fn ln)
           (list (tagged-sym 'get fn ln)
                 (list 'vector 'x 'field)
                 '(maybe (field x)))
           (list (tagged-sym 'assoc fn ln)
                 (list 'vector 'x 'field 'new-value)
                 '(field x new-value))
           impls))))

(defn create-getters [name fields fn ln]
  (comp* (list (tagged-sym 'Getter fn ln)
               (list (tagged-sym 'type-name fn ln) (list 'vector '_)
                     (str name)))
         (for [field fields]
           (let [getter-sym (tagged-sym (symbol (str "." field)) fn ln)]
             (list (list getter-sym (list 'vector 'x)
                         field)
                   (let [new-value (symbol (str "new-" field))]
                     (list getter-sym (list 'vector 'x new-value)
                           (list 'let
                                 (list (list field new-value))
                                 (cons name fields)))))))))

(defn analyze-deftype [config expr]
  (for [[_ name fields & defs] (match expr List 'deftype _ _)
        :let [fields (rest fields)
              fn (.file-name name)
              ln (.line-num name)
              type-val-sym (tagged-sym (gensym "type-val-") fn ln)
              field-getters (create-getters name fields fn ln)]
        constructor (analyze-expr config (constructor-expr name type-val-sym fields))
        impls (build-impls fields (comp field-getters defs))
        impls-ast (analyze-expr config (impls-expr type-val-sym impls))]
  (ast/type-expr name type-val-sym fields constructor impls-ast)))

(defn analyze-module [expr]
  (map (match expr List 'module _)
       (fn [[_ module-name]]
         (ast/module module-name))))

(defn analyze-git-dep [expr]
  (map (match expr List 'git-dependency _ _)
       (fn [[_ repo file-name & args]]
         (ast/git-dep repo file-name args))))

(defn analyze-add-ns [expr]
  (for [[_ ns-name module] (match expr List 'add-ns _ _)
        ns-ast (or (analyze-module module)
                   (analyze-git-dep module))]
    (ast/ns-add ns-name ns-ast)))

(defn analyze-main [config expr]
  (for [[_ args & exprs] (match expr List 'main _ _)
        body (traverse exprs maybe (partial analyze-expr config))]
    (ast/main-fn args body)))

(defn analyze-or [config expr]
  (for [[_ & exprs] (match expr List 'or)
        clauses (traverse exprs maybe (partial analyze-expr config))
        ast (or (and (= 1 (count clauses))
                     (first clauses))
                (maybe (ast/or-expr clauses)))]
    ast))

(defn analyze-and [config expr]
  (for [[_ & exprs] (match expr List 'and)
        clauses (traverse exprs maybe (partial analyze-expr config))
        ast (or (and (= 1 (count clauses))
                     (first clauses))
                (maybe (ast/and-expr clauses)))]
    ast))

(defn analyze-expr [config expr]
  (or (analyze-literal-value expr)
      (inline-text-expr expr)
      (analyze-quoted expr)
      (analyze-add-ns expr)
      (analyze-fn config expr)
      (analyze-deftype config expr)
      (analyze-protocol config expr)
      (analyze-or config expr)
      (analyze-and config expr)
      (analyze-main config expr)
      (analyze-def config expr)
      (analyze-extend-type config expr)
      (analyze-reify config expr)
      (analyze-fn-arity config expr)
      (analyze-let config expr)
      (analyze-call config expr)
      (let [_ (print-err "Could not analyze " expr)]
        (maybe (abort)))))
